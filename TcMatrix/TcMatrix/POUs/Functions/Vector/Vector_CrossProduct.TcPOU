<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.9">
  <POU Name="Vector_CrossProduct" Id="{25532393-25b9-0f66-3679-64664fc1dc7e}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION Vector_CrossProduct : BOOL
VAR_INPUT
	Res : REFERENCE TO Matrix;
END_VAR
VAR
	Ri : UINT;
	Ci : UINT;
	I : DINT;
	M_Vectors : DynamicMatrix;
	M_Det : ShrunkMatrixAccessor;
	Det : LREAL;
	Sign : LREAL;
END_VAR
VAR_IN_OUT
	Vectors : ARRAY[*] OF POINTER TO Matrix;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[//a cross product in N dimensions space requires N-1 vectors of length N, the result of which is an N-length vector orthogonal to all supplied vectors. Order of vectors matters.
//if you arrange all supplied vectors horizontally into an almost-square matrix, then each component of the result vector is simply the determinate of the aggregate matrix with the corresponding column removed

IF NOT(Res.IsVector) OR Res.IsEmpty OR (UPPER_BOUND(Vectors,1) - LOWER_BOUND(Vectors,1) + 1) <> Res.Length - 1 THEN
	Vector_CrossProduct := FALSE;
	RETURN;
END_IF

FOR I := LOWER_BOUND(Vectors,1) TO UPPER_BOUND(Vectors,1) DO
	IF Vectors[I] = 0 THEN
		Vector_CrossProduct := FALSE;
		RETURN;
	END_IF
	IF NOT(Vectors[I]^.IsVector) OR Vectors[I]^.Length <> Res.Length THEN
		Vector_CrossProduct := FALSE;
		RETURN;
	END_IF
END_FOR


IF NOT(M_Vectors.Init(Res.Length,Res.Length)) THEN
	Vector_CrossProduct := FALSE;
	RETURN;
END_IF


//build aggregate matrix
FOR Ri := 0 TO M_Vectors.Rows-1 DO
	FOR Ci := 0 TO M_Vectors.Cols-1 DO
		IF Ri = 0 THEN
			M_Vectors.SetRC(Ri,Ci,1);
		ELSE
			I := LOWER_BOUND(Vectors,1)-1 + Ri;
			M_Vectors.SetRC(Ri,Ci,Vectors[I]^.GetI(Ci));
		END_IF
	END_FOR
END_FOR

//if some vectors are parallel or whatever there is no 'one' cross product, so return false
IF M_Vectors.GetDeterminant() = 0 THEN
	Vector_CrossProduct := FALSE;
	RETURN;
END_IF

Vector_CrossProduct := TRUE;

//take determiantes
FOR Ci := 0 TO M_Vectors.Cols-1 DO
	M_Det.Init(M_Vectors,0,Ci);
	IF NOT(Matrix_DeterminateSquare(M_Det, Res=>Det)) THEN
		Vector_CrossProduct := FALSE;
		RETURN;
	END_IF
	Sign := ((UINT_TO_INT(Ci)+1) MOD 2)*2 -1;//even columns are positive, odd columns are negative
	Res.SetI(Ci,Det*Sign);
END_FOR

]]></ST>
    </Implementation>
    <LineIds Name="Vector_CrossProduct">
      <LineId Id="162" Count="23" />
      <LineId Id="191" Count="3" />
      <LineId Id="196" Count="0" />
      <LineId Id="211" Count="1" />
      <LineId Id="214" Count="0" />
      <LineId Id="216" Count="0" />
      <LineId Id="215" Count="0" />
      <LineId Id="213" Count="0" />
      <LineId Id="198" Count="1" />
      <LineId Id="224" Count="0" />
      <LineId Id="220" Count="0" />
      <LineId Id="219" Count="0" />
      <LineId Id="221" Count="0" />
      <LineId Id="223" Count="0" />
      <LineId Id="222" Count="0" />
      <LineId Id="217" Count="0" />
      <LineId Id="200" Count="0" />
      <LineId Id="218" Count="0" />
      <LineId Id="201" Count="1" />
      <LineId Id="225" Count="0" />
      <LineId Id="204" Count="3" />
      <LineId Id="241" Count="0" />
      <LineId Id="208" Count="2" />
      <LineId Id="47" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>