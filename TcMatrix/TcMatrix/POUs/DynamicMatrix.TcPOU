<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.9">
  <POU Name="DynamicMatrix" Id="{48b9f1ca-1ace-0f6f-3081-31a18046958e}" SpecialFunc="None">
    <Declaration><![CDATA[(*~
	<docu>
		<summary>
			The DynamicMatrix class uses the FB_DynMem_Manager2 to dynamically allocate as much memory as required for the given operation.
			This amazing flexibility comes at the cost of some restrictions on use in order to avoid memory leaks.
			<remarks>			
				<note type="warning">
					Using the assignment operator (:=) to copy a DynamicMatrix will result in the new matrix retaining a pointer to the data of the old matrix! For this reason, the pragma {attribute 'no_assign'} is used to block assignment at compile-time, but inheriting sub-classes will need to include this pragma themselves.
					Note that using DynamicMatrix as the return value of a function is essentially an assignment operation and will also not work. Therefore, it is recommended to always pass DynamicMatrix objects in and out of functions using the REFERENCE TO keyword. To alleviate the pain of these assignment rules there are a ton of 'Resultant' helper functions available to use which initialize a new DynamicMatrix as the result of some operation on other matrix objects.	
				</note>
			</remarks>	
			The DynamicMatrix FB will automatically free its memory when an instance of the class is created, or goes out of scope.
			This prevents memory leaks and page faults, but it also prevents you from instantiating a DynamicMatrix inside of a function and then passing a REFERENCE TO it back up the call chain.
			Another consequnce is that a DynamicMatrix cannot be retained after power-loss. 
			A DynamicMatrix within a GVL will free its memory when the program terminates.							
		</summary>			
	</docu>
~*)
{attribute 'no_assign'}
{attribute 'reflection'}
FUNCTION_BLOCK DynamicMatrix EXTENDS Matrix
VAR_INPUT
END_VAR
VAR_OUTPUT
END_VAR
VAR
    Rows_ : UINT := 0;
    Cols_ : UINT := 0;

    Data : POINTER TO LREAL; //1D array of reals, such that I = F(R,C) = R*Cols + C (row-major)

    MemManager : FB_DynMem_Manager2;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Folder Name="Helpers" Id="{29fbc253-8994-0c0a-023a-05d5b9b617cd}" />
    <Folder Name="Initializers" Id="{2e3f05ef-737a-046d-2a48-d72377f6b2d8}" />
    <Folder Name="Modifiers" Id="{c95400c8-e907-06ff-355e-19906553a770}" />
    <Folder Name="Overrides" Id="{78694c69-7fc5-08cd-0afe-6c21638c5b6b}" />
    <Folder Name="Resultants" Id="{e9cc64b5-17e3-05cb-0547-28b67d88aa8b}" />
    <Method Name="AsColVector" Id="{8333982d-97ec-03df-25f4-b8160437c221}" FolderPath="Resultants\">
      <Declaration><![CDATA[METHOD PUBLIC AsColVector : BOOL
VAR_INPUT
	M : REFERENCE TO Matrix;
	Col : UINT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[AsColVector := AsSubMatrix(M,0,M.Rows,Col,1);]]></ST>
      </Implementation>
    </Method>
    <Method Name="AsElementDifference" Id="{6b700784-8326-0bcf-2c9d-ca6331de219c}" FolderPath="Resultants\">
      <Declaration><![CDATA[METHOD PUBLIC AsElementDifference : BOOL
VAR_INPUT
	Minuend : REFERENCE TO Matrix;
	Subtrahend : REFERENCE TO Matrix;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT(Minuend.IsEqualSize(subtrahend)) THEN
	AsElementDifference := FALSE;
	LogWarning('%s: Matricies supplied to AsElementDifference were not the same size');
	RETURN;
END_IF

IF NOT(Init(Minuend.Rows,Minuend.Cols)) THEN
	AsElementDifference := FALSE;
	RETURN;
END_IF

AsElementDifference := Matrix_ElementSum(Minuend,Subtrahend,THIS^);]]></ST>
      </Implementation>
    </Method>
    <Method Name="AsElementProduct" Id="{1d639892-7279-0584-2a80-52cd430c8d25}" FolderPath="Resultants\">
      <Declaration><![CDATA[METHOD PUBLIC AsElementProduct : BOOL
VAR_INPUT
	A : REFERENCE TO Matrix;
	B : REFERENCE TO Matrix;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT(A.IsEqualSize(B)) THEN
	AsElementProduct := FALSE;
	LogWarning('%s: Matricies supplied to AsElementProduct were not the same size');
	RETURN;
END_IF

IF NOT(Init(A.Rows,A.Cols)) THEN
	AsElementProduct := FALSE;
	RETURN;
END_IF

AsElementProduct := Matrix_ElementProduct(A,B,THIS^);]]></ST>
      </Implementation>
    </Method>
    <Method Name="AsElementSum" Id="{1ed69aa6-4c59-063d-134e-146775a583ed}" FolderPath="Resultants\">
      <Declaration><![CDATA[METHOD PUBLIC AsElementSum : BOOL
VAR_INPUT
	A : REFERENCE TO Matrix;
	B : REFERENCE TO Matrix;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT(A.IsEqualSize(B)) THEN
	AsElementSum := FALSE;
	LogWarning('%s: Matricies supplied to AsElementSum were not the same size');
	RETURN;
END_IF

IF NOT(Init(A.Rows,A.Cols)) THEN
	AsElementSum := FALSE;
	RETURN;
END_IF

AsElementSum := Matrix_ElementSum(A,B,THIS^);]]></ST>
      </Implementation>
    </Method>
    <Method Name="AsGrown" Id="{3cd3cf6d-f6c0-085c-3642-2ba18a0c7d35}" FolderPath="Resultants\">
      <Declaration><![CDATA[METHOD PUBLIC AsGrown : BOOL
VAR_INPUT
	M : REFERENCE TO Matrix;
	Row : UINT;
	Col : UINT;
	DiagVal : LREAL;
	RowVal : LREAL;
	ColVal : LREAL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT(Init(M.Rows+1,M.Cols+1)) THEN
	AsGrown := FALSE;
	LogWarning('%s: Matrix supplied to AsGrown was not the right size');
	RETURN;
END_IF

AsGrown := Matrix_Grow(M,THIS^,Row,Col,DiagVal,RowVal,ColVal);]]></ST>
      </Implementation>
    </Method>
    <Method Name="AsInverse" Id="{fffae31c-4722-0c74-25e1-98f5de4d08c5}" FolderPath="Resultants\">
      <Declaration><![CDATA[METHOD PUBLIC AsInverse : BOOL
VAR_INPUT
	M : REFERENCE TO MAtrix;
	Tolerance : LREAL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT(M.IsSquare) OR M.IsEmpty THEN
	AsInverse := FALSE;
	RETURN;
END_IF

THIS^.InitCopy(M);
AsInverse := THIS^.InvertSquare(Tolerance);]]></ST>
      </Implementation>
    </Method>
    <Method Name="AsMatrixProduct" Id="{53280527-f75b-06ac-01d7-498318ada10c}" FolderPath="Resultants\">
      <Declaration><![CDATA[METHOD PUBLIC AsMatrixProduct : BOOL
VAR_INPUT
	A : REFERENCE TO Matrix;
	B : REFERENCE TO Matrix;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF A.Cols <> B.Rows THEN
	AsMatrixProduct := FALSE;
	LogWarning('%s: Matricies supplied to AsMatrixProduct are not compatible for multiplication');
	RETURN;
END_IF

IF NOT(Init(A.Rows,B.Cols)) THEN
	AsMatrixProduct := FALSE;
	RETURN;
END_IF

AsMatrixProduct := Matrix_Product(A,B,THIS^);]]></ST>
      </Implementation>
    </Method>
    <Method Name="AsRowVector" Id="{46190744-41a6-0d8f-0bf6-d07b0ad4ecb0}" FolderPath="Resultants\">
      <Declaration><![CDATA[METHOD PUBLIC AsRowVector : BOOL
VAR_INPUT
	M : REFERENCE TO Matrix;
	Row : UINT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[AsRowVector := AsSubMatrix(M,Row,1,0,M.Cols);]]></ST>
      </Implementation>
    </Method>
    <Method Name="AsScaled" Id="{b4ebfd3a-7f84-0c68-3eb7-f5f1a49c6aeb}" FolderPath="Resultants\">
      <Declaration><![CDATA[METHOD PUBLIC AsScaled : BOOL
VAR_INPUT
	M : REFERENCE TO Matrix;
	Scalar : LREAL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT(InitCopy(M)) THEN
	AsScaled := FALSE;
	RETURN;
END_IF

AsScaled := TRUE;
Scale(Scalar);]]></ST>
      </Implementation>
    </Method>
    <Method Name="AsShrunk" Id="{37c92294-b9bc-00a9-17a2-cb7d0631759a}" FolderPath="Resultants\">
      <Declaration><![CDATA[METHOD PUBLIC AsShrunk : BOOL
VAR_INPUT
	M : REFERENCE TO Matrix;
	Row : UINT;
	Col : UINT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT(Init(M.Rows-1,M.Cols-1)) THEN
	AsShrunk := FALSE;
	LogWarning('%s: Matrix supplied to AsGrown was not the right size');
	RETURN;
END_IF

AsShrunk := Matrix_Shrink(M,THIS^,Row,Col);]]></ST>
      </Implementation>
    </Method>
    <Method Name="AsSubMatrix" Id="{f93c8810-7b34-0e2d-0d0e-56744d128372}" FolderPath="Resultants\">
      <Declaration><![CDATA[METHOD PUBLIC AsSubMatrix : BOOL
VAR_INPUT
	M : REFERENCE TO Matrix;
	RowStart : UINT;
	RowCount : UINT;
	ColStart : UINT;
	ColCount : UINT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF RowStart + RowCount > M.Rows THEN
	AsSubMatrix := FALSE;
	LogWarning('%s: Attempt to access out of bounds Row during SubMatrix access');
	RETURN;
END_IF
IF ColStart + ColCount > M.Cols THEN
	AsSubMatrix := FALSE;
	LogWarning('%s: Attempt to access out of bounds Row during SubMatrix access');
	RETURN;
END_IF

IF NOT(Init(RowCount,ColCount)) THEN
	AsSubMatrix := FALSE;
	RETURN;
END_IF

AsSubMatrix := Matrix_SubMatrix(M,THIS^,RowStart,RowCount,ColStart,ColCount);]]></ST>
      </Implementation>
    </Method>
    <Method Name="AsTransposed" Id="{a2212529-f813-054e-209a-a7ba6ac5c31a}" FolderPath="Resultants\">
      <Declaration><![CDATA[METHOD PUBLIC AsTransposed : BOOL
VAR_INPUT
	M : REFERENCE TO Matrix;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT(Init(M.Cols,M.Rows)) THEN
	AsTransposed := FALSE;
	RETURN;
END_IF

AsTransposed := Matrix_Transpose(M,THIS^);]]></ST>
      </Implementation>
    </Method>
    <Method Name="AsVectorCrossProduct" Id="{3ec0f3e8-0a31-090c-3d7c-88ea53422b02}" FolderPath="Resultants\">
      <Declaration><![CDATA[METHOD PUBLIC AsVectorCrossProduct : BOOL
VAR_INPUT
END_VAR
VAR_IN_OUT
	//~
	Vectors : ARRAY[*] OF POINTER TO Matrix;
	//~

END_VAR
VAR
	Dim : UINT;
	Vi : DINT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[Dim := DINT_TO_UINT(UPPER_BOUND(Vectors,1) - LOWER_BOUND(Vectors,1))+2;

FOR I := 0 TO Dim-2 DO
	Vi := LOWER_BOUND(Vectors,1)+I;
	//check pointer before other checks because PLCs don't do short-circuit logic
	IF Vectors[Vi] = 0 THEN
		AsVectorCrossProduct := FALSE;
		LogWarning('%s: At least one of the elements of the Vector array is a null pointer');
		RETURN;
	END_IF
	IF Vectors[Vi]^.IsEmpty OR NOT(Vectors[Vi]^.IsVector) OR Vectors[Vi]^.Length <> Dim THEN
		AsVectorCrossProduct := FALSE;
		LogWarning('%s: At least one of the elements of the Vector array is empty, or not a vector of the right size');
		RETURN;
	END_IF
END_FOR

//only allocate memory if we think it will work
IF NOT(Init(Dim,1)) THEN
	AsVectorCrossProduct := FALSE;
	RETURN;
END_IF

AsVectorCrossProduct := Vector_CrossProduct(THIS^,Vectors);]]></ST>
      </Implementation>
    </Method>
    <Property Name="Cols" Id="{09c98137-9055-00b0-0894-d32717273f77}" FolderPath="Overrides\">
      <Declaration><![CDATA[(*~
<docu>
	<inheritdoc/>			
</docu>
~*)
PROPERTY PUBLIC Cols : UINT]]></Declaration>
      <Get Name="Get" Id="{ce7151de-32b2-073c-1f3b-8ce75ec362a9}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[Cols := Cols_;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="FB_exit" Id="{5b5dff2f-9433-4a66-972b-13ea86797369}" FolderPath="Overrides\">
      <Declaration><![CDATA[METHOD FB_exit : BOOL
VAR_INPUT
	bInCopyCode : BOOL; // if TRUE, the exit method is called for exiting an instance that is copied afterwards (online change).
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT(bInCopyCode)THEN
	Free();
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="FB_init" Id="{178232b5-fc73-0185-232f-1e38184a5aea}" FolderPath="Overrides\">
      <Declaration><![CDATA[METHOD FB_init : BOOL
VAR_INPUT
	bInitRetains : BOOL; // if TRUE, the retain variables are initialized (warm start / cold start)
	bInCopyCode : BOOL;  // if TRUE, the instance afterwards gets moved into the copy code (online change)
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[Free();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Free" Id="{ed9227e7-8e2a-060e-3b7c-fa220c6f8eaf}" FolderPath="Initializers\">
      <Declaration><![CDATA[(*~
	<docu>
		<summary>
			Frees all dynamically allocated memory and resets the size of the matrix to 0x0
		</summary>			
	</docu>
~*)
METHOD PUBLIC Free
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[Resize(0,0,FALSE,FALSE);
Rows_ := 0;
Cols_ := 0;
IF Data <> 0 THEN
	MemManager.Free2(Data);
END_IF;

]]></ST>
      </Implementation>
    </Method>
    <Method Name="GetI" Id="{a2b5b528-33de-0111-2730-98e9e03688a1}" FolderPath="Overrides\">
      <Declaration><![CDATA[(*~
	<docu>
		<summary>
			Gets the value of the element in this matrix at the supplied location as if the elements were stored in a 1D row-major array
			Prerequisites:
				- I &lt; Rows*Cols
				- Matrix is not empty
			<remarks>			
				<note type="note">
					If the supplied index is out of bounds the value 0 is returned and a warning is generated in the Error List
				</note>
			</remarks>
		</summary>			
		<param name="I">The index of the element which should have its value returned</param>
		<returns>The value of the element at the specified index, or 0 if an invalid index is supplied</returns>
	</docu>
~*)
METHOD PUBLIC GetI : LREAL //The value of the element at the specified index, or 0 if an invalid index is supplied
VAR_INPUT
    I : UINT; //The index of the element which should have its value returned
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF Data = 0 THEN
	GetI := 0.0;
	LogWarning('%s: Attempted I access of uninitialized Matrix');
ELSIF I >= Length THEN
	GetI := 0.0;
	LogWarning('%s: Attempted I access of out-of-bounds Matrix data');
ELSE
	GetI := Data[I];
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="Grow" Id="{f49d7c60-6f9e-4f54-b01b-3668e62342e3}" FolderPath="Modifiers\">
      <Declaration><![CDATA[METHOD PUBLIC Grow : BOOL
VAR_INPUT
	Row : UINT;
	Col : UINT;
	DiagVal : LREAL;
	RowVal : LREAL;
	ColVal : LREAL;
END_VAR
VAR
	Temp : DynamicMatrix;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[Temp.InitCopy(THIS^);
Grow := AsGrown(Temp,Row,Col,DiagVal,RowVal,ColVal);


(*~
	<docu>
		<summary>
			 Adds a row and column in the specified positions.
			 The value of the new element at the intersection is specified by DVal, while the values in the newly created Row and Column are specified by Rval and Cval, respectively.	
		</summary>			
		<returns>Returns TRUE on success</returns>
	</docu>
~*)]]></ST>
      </Implementation>
    </Method>
    <Method Name="Init" Id="{ef75234b-f0a2-0ba6-3c2d-bd5bff0db60c}" FolderPath="Initializers\">
      <Declaration><![CDATA[(*~
	<docu>
		<summary>
			Initializes a RxC matrix, with potentially random non-zero values
		</summary>			
		<param name="Rows">The number of  rows to create</param>
		<param name="Cols">The number of collumns to create</param>
		<returns>Returns True if success</returns>
	</docu>
~*)
METHOD PUBLIC Init : BOOL
VAR_INPUT
	Rows : UINT;
	Cols : UINT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[Init := Resize(Rows,Cols,FALSE,FALSE);]]></ST>
      </Implementation>
    </Method>
    <Method Name="InitConstant" Id="{6665df21-10cf-041e-2560-fd1085528ad3}" FolderPath="Initializers\">
      <Declaration><![CDATA[(*~
	<docu>
		<summary>
			  Initializes a RxC matrix where every element is equal to the supplied value
		</summary>			
		<param name="Rows">Number of rows to create</param>
		<param name="Cols">Number of columns to create</param>
		<param name="Val">The value to to initiliaze with</param>

		<returns>Returns True if success</returns>
	</docu>
~*)
METHOD PUBLIC InitConstant : BOOL;
VAR_INPUT
	Rows : UINT;
	Cols : UINT;
	Val : LREAL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[InitConstant := InitTrapezoidal(Rows,Cols,Val,Val,Val);


]]></ST>
      </Implementation>
    </Method>
    <Method Name="InitCopy" Id="{bcdd2e69-8663-4d69-9214-f5a0b970f2d2}" FolderPath="Initializers\">
      <Declaration><![CDATA[(*~
	<docu>
		<summary>
			 Initializes a matrix with the exact size and contents of the supplied matrix
		</summary>			
		<param name="M">Supplied matrix</param>
		<returns>Returns True if success</returns>
	</docu>
~*)
METHOD PUBLIC InitCopy : BOOL
VAR_INPUT
	M : REFERENCE TO Matrix;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT(Init(M.Rows,M.Cols)) THEN
	InitCopy := FALSE;
	RETURN;
END_IF

InitCopy := TRUE;

FillFrom(M);


]]></ST>
      </Implementation>
    </Method>
    <Method Name="InitIdentity" Id="{3034c14e-05ed-051b-118d-0a77fc4909a0}" FolderPath="Initializers\">
      <Declaration><![CDATA[(*~
	<docu>
		<summary>
			 Initializes a square identity matrix of size Size x Size
		</summary>			
		<param name="Size">Size of the square matrix</param>
		<returns>Returns True if success</returns>
	</docu>
~*)
METHOD PUBLIC InitIdentity : BOOL;
VAR_INPUT
	Size : UINT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[InitIdentity := InitTrapezoidal(Size,Size,1,0,0);


]]></ST>
      </Implementation>
    </Method>
    <Method Name="InitMagicSquare" Id="{b6028141-d29b-0bb0-2bb8-954bb3757e26}" FolderPath="Initializers\">
      <Declaration><![CDATA[METHOD PUBLIC InitMagicSquare : BOOL
VAR_INPUT
	Size : UINT;//must be an odd number!
END_VAR
VAR 
	Result : BOOL;	
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[//source: https://en.wikipedia.org/wiki/Magic_square#A_method_for_constructing_a_magic_square_of_odd_order

IF Size MOD 2 = 0 THEN
	InitMagicSquare := FALSE;
	RETURN;
END_IF
IF NOT(InitZeros(Size,Size)) THEN
	InitMagicSquare := FALSE;
	RETURN;
END_IF

InitMagicSquare := TRUE;

Ri := (Rows - 1)/2;
Ci := Cols-1;

FOR I := 1 TO Length DO
	SetRC(Ri,Ci,I);
	IF GetRC((Ri + 1) MOD Rows,(Ci + 1) MOD Cols) = 0 THEN
		Ri := (Ri + 1) MOD Rows;
		Ci := (Ci + 1) MOD Cols;
	ELSE
		IF Ci = 0 THEN
			Ci := Cols-1;
		ELSE
			Ci := Ci - 1;
		END_IF
	END_IF
END_FOR]]></ST>
      </Implementation>
    </Method>
    <Method Name="InitTrapezoidal" Id="{4953ae1d-3460-490d-987e-075e15022f4f}" FolderPath="Initializers\">
      <Declaration><![CDATA[(*~
	<docu>
		<summary>
			   Initializes a RxC matrix then fills is using FillTrapezoidal()
		</summary>			
		<param name="Rows">Number of rows to create</param>
		<param name="Cols">Number of columns to create</param>
		<param name="Diagonal">Every element on the main diagonal of the matrix is set to this value.</param>
		<param name="UpperRight">Every element above or to the right of the main diagonal is set to this value</param>
		<param name="LowerLeft">Every element below or to the left of the main diagonal is set to this value</param>
		<returns>Returns True if success</returns>
	</docu>
~*)
METHOD PUBLIC InitTrapezoidal : BOOL
VAR_INPUT
	Rows : UINT;
	Cols : UINT;
	Diagonal : LREAL;
	UpperRight : LREAL;
	LowerLeft : LREAL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT(Init(Rows,Cols)) THEN
	InitTrapezoidal := FALSE;
	RETURN;
END_IF

InitTrapezoidal := TRUE;

FillTrapezoidal(Diagonal,UpperRight,LowerLeft);]]></ST>
      </Implementation>
    </Method>
    <Method Name="InitVector" Id="{7d76ba78-bfb1-0c87-0b22-1cb029ef8698}" FolderPath="Initializers\">
      <Declaration><![CDATA[(*~
	<docu>
		<summary>
			 Initializes an Lx1 column vector where the 0th element is equal to Val and every subsequent element is Inc larger than the previous
		</summary>			
		<param name="Length">Length of the vector</param>
		<param name="Value">Value of 0th element</param>
		<param name="Increment">Value by witch every other value is incremented by</param>
		<returns>Returns True if success</returns>
	</docu>
~*)
METHOD PUBLIC InitVector : BOOL
VAR_INPUT
	Length : UINT;
	Value : LREAL;
	Increment : LREAL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT(Init(Length,1)) THEN
	InitVector := FALSE;
	RETURN;
END_IF

InitVector := TRUE;

IF Increment = 0 THEN
	FillTrapezoidal(Value,Value,Value);
ELSE
	IF Length > 0 THEN
		FOR I:= 0 TO Length-1 DO
			SetI(I,Value + I * Increment);
		END_FOR
	END_IF;
END_IF

]]></ST>
      </Implementation>
    </Method>
    <Method Name="InitZeros" Id="{536c56ab-c302-073c-2f7f-5791158506f5}" FolderPath="Initializers\">
      <Declaration><![CDATA[(*~
	<docu>
		<summary>
			 Initializes a RxC matrix where every element is equal to 0.0
		</summary>			
		<param name="Rows">The number of  rows to create</param>
		<param name="Cols">The number of collumns to create</param>
		<returns>Returns True if success</returns>
	</docu>
~*)
METHOD PUBLIC InitZeros : BOOL
VAR_INPUT
	Rows : UINT;
	Cols : UINT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[InitZeros := Resize(Rows,Cols,FALSE,TRUE);

]]></ST>
      </Implementation>
    </Method>
    <Method Name="LogData" Id="{90177dcb-13b5-0277-11bc-c310b8752ac9}" FolderPath="Helpers\">
      <Declaration><![CDATA[METHOD PUBLIC LogData : BOOL
VAR_INPUT
	Message : T_MaxString;
END_VAR
VAR
	BufferLen : UDINT;
	Buffer : POINTER TO STRING;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[BufferLen := GetStringLengthEstimate();
Buffer := MemManager.Alloc(BufferLen+INT_TO_UDINT(Len(Message))+2,FALSE);
IF Buffer = 0 THEN
	LogData := FALSE;
	RETURN;
END_IF
Buffer^ := CONCAT(Message,'$R$L');//writes null character to first element?
IF NOT(WriteDataToString(Buffer+INT_TO_DWORD(LEN(Message))+2,BufferLen)) THEN
	LogData := FALSE;
	MemManager.Free2(Buffer);
	RETURN;
END_IF
ADSLOGSTR(ADSLOG_MSGTYPE_LOG OR ADSLOG_MSGTYPE_STRING, Buffer^,sPath);
MemManager.Free2(Buffer);]]></ST>
      </Implementation>
    </Method>
    <Method Name="Resize" Id="{86e43810-4b4c-4ed7-930f-0ccd5cc3ebc0}" FolderPath="Modifiers\">
      <Declaration><![CDATA[(*~
	<docu>
		<summary>
			Changes the total number of Rows and Cols in the matrix. 
			If Retain is seleced then any element within the bounds of both the initial and resulting matrix will have its value retained.
			If Init is selected then any newly created element will have its value set to zero.
		</summary>			
		<param name="NewRows">The row of the element to fetch</param>
		<param name="NewCols">The column of the element to fetch</param>
		<param name="RetainVals">If  selected then  any element within the bounds of both the initial and resulting matrix will have its value retained.</param>
		<param name="ClearVals">If  selected then any newly created element will have its value set to zero.</param>
		
		<returns>Returns TRUE on success</returns>
	</docu>
~*)
METHOD PUBLIC Resize : BOOL
VAR_INPUT
	NewRows : UINT;
	NewCols : UINT;
	RetainVals : BOOL;//retains 
	ClearVals : BOOL;
END_VAR
VAR
	OldData : POINTER TO LREAL;
	OldRows : UINT;
	OldCols : UINT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[

//case where desired size is an empty matrix
IF NewRows * NewCols = 0 THEN
	IF Data <> 0 THEN
		MemManager.Free2(Data);
	END_IF
	
	Resize := TRUE;
	Rows_ := NewRows;
	Cols_ := NewCols;
	
//case where desired size is a non=empty matrix
ELSE
	//backup data so we can refill with it if necessary, then free it
	OldData := Data;
	OldRows := Rows;
	OldCols := Cols;
	
	//change primary buffer size
	Data := MemManager.Alloc(nSize := UINT_TO_UDINT(NewRows) * UINT_TO_UDINT(NewCols) * SIZEOF(LREAL), bReset := ClearVals);
	//error condition if memory cannot be allocated
	IF Data = 0 THEN
		Rows_ := 0;
		Cols_ := 0;
		ADSLOGSTR(ADSLOG_MSGTYPE_ERROR,'Unable to allocate memory when resizing matrix','');
		Resize := FALSE;
		Data := OldData;//put the data back, if any
		RETURN;
	END_IF
	
	Rows_ := NewRows;
	Cols_ := newCols;
	Resize := TRUE;
	
	//copy data if the previous size was not empty, the pointer is not null, and retain was selected
	IF RetainVals THEN
		IF NOT(OldRows*OldCols = 0) AND OldData <> 0 THEN
			FOR Ri := 0 TO MIN(NewRows,OldRows)-1 DO
				FOR Ci := 0 TO MIN(NewCols,OldCOls)-1 DO
					Data[RCC2I(Ri,Ci,NewCols)] := OldData[RCC2I(Ri,Ci,OldCols)];
				END_FOR
			END_FOR
		ELSE
			LogWarning('%s: Data retention optino was selected for resize, but the previous matrix did not have any data stored');
		END_IF
	END_IF
	
	//free old data now that everything works
	IF OldData <> 0 THEN
		MemManager.Free2(OldData);
	END_IF
	
	
	
END_IF



]]></ST>
      </Implementation>
    </Method>
    <Property Name="Rows" Id="{5a9e21cc-4483-01f1-1ffd-f7170d98d654}" FolderPath="Overrides\">
      <Declaration><![CDATA[(*~
	<docu>
		<inheritdoc/>			
	</docu>
~*)
PROPERTY PUBLIC Rows : UINT]]></Declaration>
      <Get Name="Get" Id="{851dbb5a-4632-0955-0ca2-0204caf2236d}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[Rows := Rows_;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="SetI" Id="{8240be42-2571-04a1-0d81-a5786edab7a1}" FolderPath="Overrides\">
      <Declaration><![CDATA[(*~
	<docu>
		<summary>
			Sets the element specified BY the supplied index TO the suppleid value, assuming the data OF the matrix is stored in a 1D row-major ARRAY
			Prerequisites: - I &lt; Rows*Cols
		</summary>			
		<param name="I">The index specifying which element should be modified</param>
		<param name="Val">The value copied to the corresponding element</param>
		<returns>TRUE if the specified index is valid and the data is copied. FLASE otherwise</returns>
	</docu>
~*)
METHOD PUBLIC SetI : BOOL//TRUE if the specified index is valid and the data is copied. FLASE otherwise
VAR_INPUT
	I : UINT;//The index specifying which element should be modified
	Val : LREAL;//The value copied to the corresponding element
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF Data = 0 THEN
	SetI := FALSE;
	LogWarning('%s: Attempt to set data using I access when data is not initialized');
ELSIF I >= Length THEN
	SetI := FALSE;
	LogWarning('%s: Attempt to set data using I access when I is out of bounds');
ELSE
	SetI := TRUE;
	Data[I] := Val;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="Shrink" Id="{b394fe74-6e86-4084-bac8-4e80abad3f51}" FolderPath="Modifiers\">
      <Declaration><![CDATA[(*~
	<docu>
		<summary>
			 Removes the specified Row and Column from the matrix, resuling in a new size of (Rows-1,Cols-1).
			 No dimension can be shrunk from 1 to 0 (therefore vectors only shrink in one direction).
		</summary>			
		<returns>Returns TRUE on success</returns>
	</docu>
~*)
METHOD PUBLIC Shrink : BOOL
VAR_INPUT
	Row : UINT;
	Col : UINT;
END_VAR
VAR
	Temp : DynamicMatrix;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF IsEmpty THEN
	Shrink := FALSE;
	RETURN;
END_IF

Temp.InitCopy(THIS^);
Shrink := AsShrunk(Temp,Row,Col);

]]></ST>
      </Implementation>
    </Method>
    <Method Name="Transpose" Id="{5895d9f9-ae16-04ed-0e86-43484feeb00d}" FolderPath="Modifiers\">
      <Declaration><![CDATA[(*~
	<docu>
		<summary>
			Similar to <see cref="Matrix.TransposeSquare">TransposeSquare</see>, however it works on rectangular matricies (swapping Rows and Cols)
		</summary>			
		<returns>Returns TRUE on success</returns>
	</docu>
~*)
METHOD PUBLIC Transpose : BOOL
VAR_INPUT
END_VAR
VAR
	Temp : DynamicMatrix;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF IsSquare THEN
	Matrix_TransposeSquare(THIS^);
	Transpose := TRUE;
ELSE

	IF NOT(Temp.InitCopy(THIS^)) THEN
		Transpose := FALSE;
	END_IF
	
	Transpose := AsTransposed(Temp);

END_IF

]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>