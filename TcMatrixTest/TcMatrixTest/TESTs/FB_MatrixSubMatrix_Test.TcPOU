<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.9">
  <POU Name="FB_MatrixSubMatrix_Test" Id="{ef45b795-bcc1-0b30-385f-8eea9a7a6ef8}" SpecialFunc="None">
    <Declaration><![CDATA[{attribute 'reflection'}
FUNCTION_BLOCK FB_MatrixSubMatrix_Test EXTENDS FB_TestSuite
VAR_INPUT
END_VAR
VAR_OUTPUT
END_VAR
VAR
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[WhenCreatedExpectDataRetained();]]></ST>
    </Implementation>
    <Method Name="WhenCreatedExpectDataRetained" Id="{88f20cd2-8fe8-057d-2917-50566d2adf1e}">
      <Declaration><![CDATA[METHOD PRIVATE WhenCreatedExpectDataRetained
VAR_INPUT
END_VAR
VAR
	M1 : Matrix;
	M2 : Matrix;
	Result : BOOL;
	
	Ri : UINT;
	Ci : UINT;
	
	Expected : LREAL;
	Actual : LREAL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('WhenCreatedExpectDataRetained');

// @TEST-RUN
M1.InitMagicSquare(5);
Result := M2.AsSubMatrix(M1,1,3,1,3);

// @TEST-ASSERT
AssertTrue(Result,'Main function call was not successful');

FOR Ri := 0 TO M2.Rows-1 DO
	FOR Ci := 0 TO M2.Cols-1 DO
		Expected := M1.GetRC(Ri+1,Ci+1);
		Actual := M2.GetRC(Ri,Ci);
		AssertEquals(Expected, Actual, 'Equivalent values are not equal after submatrix');
	END_FOR;
END_FOR

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="FB_MatrixSubMatrix_Test">
      <LineId Id="9" Count="0" />
    </LineIds>
    <LineIds Name="FB_MatrixSubMatrix_Test.WhenCreatedExpectDataRetained">
      <LineId Id="9" Count="3" />
      <LineId Id="14" Count="3" />
      <LineId Id="22" Count="0" />
      <LineId Id="21" Count="0" />
      <LineId Id="29" Count="0" />
      <LineId Id="35" Count="1" />
      <LineId Id="34" Count="0" />
      <LineId Id="30" Count="0" />
      <LineId Id="27" Count="0" />
      <LineId Id="18" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>